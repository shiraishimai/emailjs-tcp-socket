"use strict";

var _workerUtils = require("./worker-utils");

var _tls = _interopRequireDefault(require("./tls"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var tls = new _tls["default"]();

tls.tlserror = function (message) {
  return self.postMessage((0, _workerUtils.createMessage)(_workerUtils.EVENT_ERROR, message));
};

tls.tlscert = function (cert) {
  return self.postMessage((0, _workerUtils.createMessage)(_workerUtils.EVENT_CERT, cert));
};

tls.tlsclose = function () {
  return self.postMessage((0, _workerUtils.createMessage)(_workerUtils.EVENT_CLOSE));
};

tls.tlsopen = function () {
  return self.postMessage((0, _workerUtils.createMessage)(_workerUtils.EVENT_OPEN));
};

tls.tlsoutbound = function (buffer) {
  return self.postMessage((0, _workerUtils.createMessage)(_workerUtils.EVENT_OUTBOUND, buffer), [buffer]);
};

tls.tlsinbound = function (buffer) {
  return self.postMessage((0, _workerUtils.createMessage)(_workerUtils.EVENT_INBOUND, buffer), [buffer]);
};

self.onmessage = function (_ref) {
  var _ref$data = _ref.data,
      event = _ref$data.event,
      message = _ref$data.message;

  switch (event) {
    case _workerUtils.EVENT_INBOUND:
      tls.processInbound(message);
      break;

    case _workerUtils.EVENT_OUTBOUND:
      tls.prepareOutbound(message);
      break;

    case _workerUtils.EVENT_HANDSHAKE:
      tls.handshake();
      break;

    case _workerUtils.EVENT_CONFIG:
      tls.configure(message);
      break;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy90bHMtd29ya2VyLmpzIl0sIm5hbWVzIjpbInRscyIsIlRMUyIsInRsc2Vycm9yIiwibWVzc2FnZSIsInNlbGYiLCJwb3N0TWVzc2FnZSIsIkVWRU5UX0VSUk9SIiwidGxzY2VydCIsImNlcnQiLCJFVkVOVF9DRVJUIiwidGxzY2xvc2UiLCJFVkVOVF9DTE9TRSIsInRsc29wZW4iLCJFVkVOVF9PUEVOIiwidGxzb3V0Ym91bmQiLCJidWZmZXIiLCJFVkVOVF9PVVRCT1VORCIsInRsc2luYm91bmQiLCJFVkVOVF9JTkJPVU5EIiwib25tZXNzYWdlIiwiZGF0YSIsImV2ZW50IiwicHJvY2Vzc0luYm91bmQiLCJwcmVwYXJlT3V0Ym91bmQiLCJFVkVOVF9IQU5EU0hBS0UiLCJoYW5kc2hha2UiLCJFVkVOVF9DT05GSUciLCJjb25maWd1cmUiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBUUE7Ozs7QUFFQSxJQUFJQSxHQUFHLEdBQUcsSUFBSUMsZUFBSixFQUFWOztBQUNBRCxHQUFHLENBQUNFLFFBQUosR0FBZSxVQUFBQyxPQUFPO0FBQUEsU0FBSUMsSUFBSSxDQUFDQyxXQUFMLENBQWlCLGdDQUFjQyx3QkFBZCxFQUEyQkgsT0FBM0IsQ0FBakIsQ0FBSjtBQUFBLENBQXRCOztBQUNBSCxHQUFHLENBQUNPLE9BQUosR0FBYyxVQUFBQyxJQUFJO0FBQUEsU0FBSUosSUFBSSxDQUFDQyxXQUFMLENBQWlCLGdDQUFjSSx1QkFBZCxFQUEwQkQsSUFBMUIsQ0FBakIsQ0FBSjtBQUFBLENBQWxCOztBQUNBUixHQUFHLENBQUNVLFFBQUosR0FBZTtBQUFBLFNBQU1OLElBQUksQ0FBQ0MsV0FBTCxDQUFpQixnQ0FBY00sd0JBQWQsQ0FBakIsQ0FBTjtBQUFBLENBQWY7O0FBQ0FYLEdBQUcsQ0FBQ1ksT0FBSixHQUFjO0FBQUEsU0FBTVIsSUFBSSxDQUFDQyxXQUFMLENBQWlCLGdDQUFjUSx1QkFBZCxDQUFqQixDQUFOO0FBQUEsQ0FBZDs7QUFDQWIsR0FBRyxDQUFDYyxXQUFKLEdBQWtCLFVBQUFDLE1BQU07QUFBQSxTQUFJWCxJQUFJLENBQUNDLFdBQUwsQ0FBaUIsZ0NBQWNXLDJCQUFkLEVBQThCRCxNQUE5QixDQUFqQixFQUF3RCxDQUFDQSxNQUFELENBQXhELENBQUo7QUFBQSxDQUF4Qjs7QUFDQWYsR0FBRyxDQUFDaUIsVUFBSixHQUFpQixVQUFBRixNQUFNO0FBQUEsU0FBSVgsSUFBSSxDQUFDQyxXQUFMLENBQWlCLGdDQUFjYSwwQkFBZCxFQUE2QkgsTUFBN0IsQ0FBakIsRUFBdUQsQ0FBQ0EsTUFBRCxDQUF2RCxDQUFKO0FBQUEsQ0FBdkI7O0FBRUFYLElBQUksQ0FBQ2UsU0FBTCxHQUFpQixnQkFBd0M7QUFBQSx1QkFBNUJDLElBQTRCO0FBQUEsTUFBcEJDLEtBQW9CLGFBQXBCQSxLQUFvQjtBQUFBLE1BQWJsQixPQUFhLGFBQWJBLE9BQWE7O0FBQ3ZELFVBQVFrQixLQUFSO0FBQ0UsU0FBS0gsMEJBQUw7QUFDRWxCLE1BQUFBLEdBQUcsQ0FBQ3NCLGNBQUosQ0FBbUJuQixPQUFuQjtBQUNBOztBQUNGLFNBQUthLDJCQUFMO0FBQ0VoQixNQUFBQSxHQUFHLENBQUN1QixlQUFKLENBQW9CcEIsT0FBcEI7QUFDQTs7QUFDRixTQUFLcUIsNEJBQUw7QUFDRXhCLE1BQUFBLEdBQUcsQ0FBQ3lCLFNBQUo7QUFDQTs7QUFDRixTQUFLQyx5QkFBTDtBQUNFMUIsTUFBQUEsR0FBRyxDQUFDMkIsU0FBSixDQUFjeEIsT0FBZDtBQUNBO0FBWko7QUFjRCxDQWZEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRVZFTlRfSEFORFNIQUtFLFxuICBFVkVOVF9JTkJPVU5ELCBFVkVOVF9PVVRCT1VORCxcbiAgRVZFTlRfT1BFTiwgRVZFTlRfQ0xPU0UsXG4gIEVWRU5UX0NPTkZJRywgRVZFTlRfQ0VSVCxcbiAgRVZFTlRfRVJST1IsXG4gIGNyZWF0ZU1lc3NhZ2Vcbn0gZnJvbSAnLi93b3JrZXItdXRpbHMnXG5pbXBvcnQgVExTIGZyb20gJy4vdGxzJ1xuXG52YXIgdGxzID0gbmV3IFRMUygpXG50bHMudGxzZXJyb3IgPSBtZXNzYWdlID0+IHNlbGYucG9zdE1lc3NhZ2UoY3JlYXRlTWVzc2FnZShFVkVOVF9FUlJPUiwgbWVzc2FnZSkpXG50bHMudGxzY2VydCA9IGNlcnQgPT4gc2VsZi5wb3N0TWVzc2FnZShjcmVhdGVNZXNzYWdlKEVWRU5UX0NFUlQsIGNlcnQpKVxudGxzLnRsc2Nsb3NlID0gKCkgPT4gc2VsZi5wb3N0TWVzc2FnZShjcmVhdGVNZXNzYWdlKEVWRU5UX0NMT1NFKSlcbnRscy50bHNvcGVuID0gKCkgPT4gc2VsZi5wb3N0TWVzc2FnZShjcmVhdGVNZXNzYWdlKEVWRU5UX09QRU4pKVxudGxzLnRsc291dGJvdW5kID0gYnVmZmVyID0+IHNlbGYucG9zdE1lc3NhZ2UoY3JlYXRlTWVzc2FnZShFVkVOVF9PVVRCT1VORCwgYnVmZmVyKSwgW2J1ZmZlcl0pXG50bHMudGxzaW5ib3VuZCA9IGJ1ZmZlciA9PiBzZWxmLnBvc3RNZXNzYWdlKGNyZWF0ZU1lc3NhZ2UoRVZFTlRfSU5CT1VORCwgYnVmZmVyKSwgW2J1ZmZlcl0pXG5cbnNlbGYub25tZXNzYWdlID0gZnVuY3Rpb24gKHsgZGF0YTogeyBldmVudCwgbWVzc2FnZSB9IH0pIHtcbiAgc3dpdGNoIChldmVudCkge1xuICAgIGNhc2UgRVZFTlRfSU5CT1VORDpcbiAgICAgIHRscy5wcm9jZXNzSW5ib3VuZChtZXNzYWdlKVxuICAgICAgYnJlYWtcbiAgICBjYXNlIEVWRU5UX09VVEJPVU5EOlxuICAgICAgdGxzLnByZXBhcmVPdXRib3VuZChtZXNzYWdlKVxuICAgICAgYnJlYWtcbiAgICBjYXNlIEVWRU5UX0hBTkRTSEFLRTpcbiAgICAgIHRscy5oYW5kc2hha2UoKVxuICAgICAgYnJlYWtcbiAgICBjYXNlIEVWRU5UX0NPTkZJRzpcbiAgICAgIHRscy5jb25maWd1cmUobWVzc2FnZSlcbiAgICAgIGJyZWFrXG4gIH1cbn1cbiJdfQ==